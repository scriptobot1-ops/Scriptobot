<!-- NAVBAR -->
  <header class="site-header">
    <nav class="navbar">
      <a class="brand" href="index.html">Scriptobot</a>
      
      <!-- Yeh checkbox input hidden rahega aur menu ko control karega -->
      <input type="checkbox" id="menu-toggle-checkbox" class="hamburger-checkbox-hidden">
      
      <!-- Yeh label ab upar wale checkbox se 'for' attribute se link hoga -->
      <label for="menu-toggle-checkbox" class="hamburger" aria-label="Toggle navigation">
        <svg viewBox="0 0 32 32">
          <path class="line line-top-bottom" d="M27 10 13 10C10.8 10 9 8.2 9 6 9 3.5 10.8 2 13 2 15.2 2 17 3.8 17 6L17 26C17 28.2 18.8 30 21 30 23.2 30 25 28.2 25 26 25 23.8 23.2 22 21 22L7 22"></path>
          <path class="line" d="M7 16 27 16"></path>
        </svg>
      </label>
      
      <ul class="nav-links">
        <li><a href="index.html">Home</a></li>
        <li><a href="about.html">About</a></li>
        <li><a href="services.html">Services</a></li>
        <li><a href="portfolio.html">Portfolio</a></li>
        <li><a href="blog.html">Blog</a></li>
        <li><a href="contact.html">Contact</a></li>
        <li><a href="login.html">Login</a></li>
      </ul>
    </nav>
  </header>



  /* Base Reset */
* { margin:0; padding:0; box-sizing:border-box; }
body { font-family: Arial, sans-serif; background:var(--bg); color:var(--text); transition:0.3s; }

/* Theme Variables (Combined from your provided CSS) */
:root {
  --bg:#121212; /* Dark theme background */
  --text:#f5f5f5; /* Dark theme text color */
  --glass: rgba(0,0,0,0.3); /* Dark theme glass effect */
  --accent:#e63946; /* Your accent color */
  
  /* Additional variables that may be used by navbar, derived from previous context */
  --card-transition: transform 0.3s ease, box-shadow 0.3s ease; /* For smooth transitions */
}

/* General Body Enhancements (from your provided CSS) */
body {
  line-height: 1.6; /* Improves readability of longer texts */
  -webkit-font-smoothing: antialiased; /* Smoother fonts on WebKit browsers */
  -moz-osx-font-smoothing: grayscale; /* Smoother fonts on Firefox OSX */
  text-rendering: optimizeLegibility; /* Optimizes text rendering for legibility */
  overflow-x: hidden; /* Prevents horizontal scroll from potential animations */
}

/* Custom Scrollbar (from your provided CSS) */
::-webkit-scrollbar { width: 10px; }
::-webkit-scrollbar-track { background: var(--bg); }
::-webkit-scrollbar-thumb {
  background: var(--accent);
  border-radius: 5px;
  border: 2px solid var(--bg);
}
::-webkit-scrollbar-thumb:hover { background: var(--accent); }

/* Text Selection Style (from your provided CSS) */
::selection { background-color: var(--accent); color: var(--bg); }

/* Focus States (from your provided CSS) */
:focus-visible {
  outline: 2px solid var(--accent);
  outline-offset: 3px;
  border-radius: 4px;
}
.btn:focus-visible, .hero-left:focus-visible, .card:focus-visible,
.review-card:focus-visible, input:focus-visible, textarea:focus-visible {
  border-radius: 8px;
}

/* --- NAVBAR STYLES (Updated for requested changes) --- */
.site-header {
  backdrop-filter: blur(10px);
  background: var(--glass);
  position: sticky;
  top:0;
  z-index:100;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
}

.navbar {
  display:flex;
  justify-content:space-between;
  align-items:center;
  padding:1rem 2rem; /* Your existing padding */
  max-width: 1200px; /* To center the navbar content on larger screens */
  margin: 0 auto; /* To center the navbar content */
}

.brand {
  font-size:1.5rem; /* Your existing font-size */
  font-weight:bold; /* Your existing font-weight */
  color:var(--accent);
  text-decoration:none;
  text-shadow: 0 0 5px rgba(230, 57, 70, 0.4); /* Subtle glow for brand text */
  transition: color 0.3s ease-in-out, text-shadow 0.3s ease-in-out; /* Removed transform for glow only */
}
.brand:hover {
  color: var(--accent); /* Keep accent color on hover */
  text-shadow: 0 0 10px rgba(230, 57, 70, 0.7), 0 0 20px rgba(230, 57, 70, 0.3); /* Stronger glow on hover */
}

.nav-links {
  display:flex;
  list-style:none;
  /* Links spacing: Door door the, ab theek kiye */
  gap:0.7rem; /* Gap kam kiya to make them closer */
  margin: 0; /* Reset default list margin */
  padding: 0; /* Reset default list padding */
}

.nav-links a {
  text-decoration:none;
  color:var(--text);
  /* Links size aur boldness: Thori small kiye aur bold rakha */
  font-weight:700; /* Bold rakha */
  font-size:1em; /* Size thora kam kiya from 1.1em to 1em */
  position: relative; /* Needed for ::after pseudo-element positioning */
  transition: color 0.3s ease-in-out, text-shadow 0.3s ease-in-out;
}
.nav-links a::after {
  content: '';
  position: absolute;
  left: 0;
  bottom: -5px; /* Position the underline below the text */
  width: 0;
  height: 2px;
  background: var(--accent);
  transition: width 0.3s ease-out; /* Smooth transition for the underline */
}
.nav-links a:hover {
  color: var(--accent);
  text-shadow: 0 0 8px rgba(230, 57, 70, 0.4);
}
.nav-links a:hover::after {
  width: 100%; /* Expand underline on hover */
}

/* --- Uiverse Hamburger Styles --- */
/* Hamburger checkbox ko screen se visually hide karein lekin accessible rakhein */
.hamburger-checkbox-hidden {
  position: absolute;
  opacity: 0;
  pointer-events: none;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  white-space: nowrap;
  border: 0;
}

.hamburger {
  cursor: pointer;
  display: none; /* Default hidden for larger screens */
  align-items: center; /* SVG ko vertically center karne ke liye */
  justify-content: center; /* SVG ko horizontally center karne ke liye */
  padding: 0.5rem; /* Touch target ko badhayein */
  border-radius: 8px; /* Halki si border radius */
  transition: background-color 0.3s ease;
  z-index: 1001; /* Ensure it's above other content */
}

.hamburger:hover {
  background-color: rgba(255, 255, 255, 0.1); /* Hover par halka background */
}

/* Uiverse SVG animation ke liye: input:checked + label > svg */
.hamburger-checkbox-hidden:checked + .hamburger svg {
  transform: rotate(-45deg);
}

.hamburger-checkbox-hidden:checked + .hamburger .line-top-bottom {
  stroke-dasharray: 20 300;
  stroke-dashoffset: -32.42;
}

.hamburger svg {
  height: 2.2em; /* The size of the SVG defines the overall size */
  width: 2.2em;
  transition: transform 600ms cubic-bezier(0.4, 0, 0.2, 1); /* Define the transition for transforming the SVG */
}

.line {
  fill: none;
  stroke: var(--text); /* White se theme text color kiya */
  stroke-linecap: round;
  stroke-linejoin: round;
  stroke-width: 3;
  transition: stroke-dasharray 600ms cubic-bezier(0.4, 0, 0.2, 1),
              stroke-dashoffset 600ms cubic-bezier(0.4, 0, 0.2, 1); /* Define the transition for transforming the Stroke */
}

.line-top-bottom {
  stroke-dasharray: 12 63;
}


/* --- Responsive Adjustments for Navbar (Updated for dropdown links hover) --- */
@media (max-width: 768px) {
  .site-header {
    box-shadow: 0 1px 5px rgba(0, 0, 0, 0.08); /* Lighter shadow for mobile navbar */
  }
  .navbar {
    padding: 0.8rem 1.5rem; /* Adjusted padding for mobile screens */
    width: 100%;
    box-sizing: border-box; /* Include padding in element's total width */
  }
  
  .hamburger {
    display: flex; /* Show hamburger on small screens */
  }

  .nav-links {
    display: flex; /* Flexbox for column layout */
    flex-direction: column; /* Stack links vertically */
    position: absolute;
    top: 100%; /* Position below the header */
    left: 0;
    width: 100%;
    background-color: var(--bg); /* Background color for dropdown */
    box-shadow: 0 8px 20px rgba(0,0,0,0.15); /* Shadow for depth */
    border-top: 1px solid rgba(255, 255, 255, 0.1); /* Separator from header */
    padding: 0;
    max-height: 0; /* Hide by default */
    overflow: hidden; /* Hide overflowing content */
    opacity: 0; /* Fade out effect */
    visibility: hidden; /* Hide from screen readers when collapsed */
    text-align: center;
    transition: max-height 0.4s ease-in-out, opacity 0.4s ease-in-out, visibility 0.4s ease-in-out;
    z-index: 999;
    border-bottom-left-radius: 8px;
    border-bottom-right-radius: 8px;
  }

  /* Jab hamburger input:checked ho tab nav links ko dikhao */
  #menu-toggle-checkbox:checked ~ .nav-links {
    max-height: 500px; /* Adjust this value if your menu content is taller */
    padding: 1rem 0; /* Padding when expanded */
    opacity: 1;
    visibility: visible;
  }

  .nav-links li {
    margin: 0.5rem 0; /* Vertical spacing between links */
  }

  .nav-links a {
    padding: 0.8rem 1rem; /* Clickable area for links */
    display: block;
    text-decoration: none;
    font-weight:700; /* Mobile dropdown links ko bold rakha */
    font-size:1.1em; /* Mobile dropdown links ki size theek rakhi */
    transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out;
  }
  
  .nav-links a:hover {
    /* Small screen dropdown links par hover effect (background highlight) */
    background-color: rgba(255, 255, 255, 0.05); /* Subtle background highlight */
    color: var(--accent); /* Text color change to accent */
    /* text-shadow remove kiya, glow ki bajaye background highlight */
  }

  .nav-links a::after {
    display: none; /* Hide underline on mobile */
  }
  .nav-links a:hover::after {
    width: 0; /* No underline expansion on mobile */
  }
}

@media (max-width: 480px) {
    .navbar {
      padding: 0.8rem 1rem; /* Adjust padding for very small screens */
    }
}










///////// Ai input /////////////////
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Secret Code & AI Input</title>
  <!-- Google Fonts for Poppins -->
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap" rel="stylesheet">

  <!-- === NEW: Tailwind CSS CDN for Element 2 (Performance Analytics Card) === -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- ==================================================================== -->

  <style>
    /* Global Styles */
    body {
      background-color: #0c0c0c;
      color: white;
      font-family: "Poppins", sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: flex-start; /* Content ko top align karein */
      min-height: 100vh; /* Changed to min-height to allow content to expand */
      overflow-x: hidden; /* Prevent horizontal scroll */
      transition: all 0.6s ease;
      position: relative;
      padding: 20px; /* Add some padding for overall content */
      box-sizing: border-box; /* Include padding in element's total width and height */
    }

    h2 {
      color: #14b5e6;
      font-size: 1.8em;
      margin-bottom: 30px;
      letter-spacing: 1px;
      text-align: center;
    }

    /* Password Input Styles */
    .password {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
      margin-bottom: 20px; /* Space between password and output */
    }

    .password input {
      width: 35px;
      height: 45px;
      text-align: center;
      background-color: transparent;
      border: none;
      border-bottom: solid 2px rgb(20, 181, 230);
      font-size: 22px;
      color: white;
      outline: none;
      transition: border-bottom-color 0.3s ease;
    }
    .password input:focus {
        border-bottom-color: #37ff8b; /* Highlight on focus */
    }

    /* Animated Name (Wahid) */
    .reveal {
      font-size: 3em;
      font-weight: 700;
      background: linear-gradient(90deg, #37ff8b, #14b5e6, #ffdd00);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      opacity: 0;
      transform: translateY(30px);
      animation: fadeUp 1s forwards ease;
    }

    /* Futures Section */
    .futures {
      margin-top: 15px;
      font-size: 1.1em;
      line-height: 1.7em;
      color: #bcbcbc;
      max-width: 700px;
      text-align: center;
      opacity: 0;
      transform: translateY(30px);
      animation: fadeUp 1s 0.6s forwards ease;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px; /* Space between content blocks */
    }

    .futures-text {
        margin-bottom: 20px;
    }

    .dynamic-features {
        display: flex;
        flex-direction: column;
        gap: 15px;
        width: 100%;
        max-width: 500px;
    }

    .feature-button {
        padding: 10px 20px;
        font-size: 1em;
        background-color: #3b82f6; /* Blue button */
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }
    .feature-button:hover {
        background-color: #2563eb;
        transform: translateY(-2px);
    }
    .feature-button:active {
        transform: translateY(0);
    }

    .feature-content {
        background-color: rgba(255, 255, 255, 0.1);
        padding: 15px;
        border-radius: 8px;
        text-align: left;
        color: #e0e0e0;
        font-size: 0.95em;
        line-height: 1.6;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
    }
    .feature-content h3 {
        color: #37ff8b; /* Green highlight for headings */
        margin-top: 0;
        margin-bottom: 10px;
        font-size: 1.2em;
    }

    /* Keyframe Animations */
    @keyframes fadeUp {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    /* Output Area for Content & Buttons */
    #output {
      text-align: center;
      padding: 0 20px;
      /* === UPDATED: display flex properties for better card arrangement === */
      display: flex;
      flex-direction: row; /* Make items arrange in a row */
      flex-wrap: wrap; /* Allow items to wrap to the next line */
      align-items: flex-start; /* Align items to the top of the flex container */
      justify-content: center; /* Center items horizontally */
      gap: 40px; /* Space between the cards/elements */
      /* ==================================================================== */
      margin-top: 20px; /* Space from password box */
      width: 100%;
      max-width: 800px; /* Max width for readability */
    }

    /* Wrong Code Message */
    .wrong-code-message {
      color: #ff4141; /* Red color */
      font-weight: bold;
      margin-top: 20px;
      opacity: 0;
      transform: translateY(10px);
      animation: fadeInDown 0.5s forwards ease;
    }

    @keyframes fadeInDown {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    /* --- From Uiverse.io by Cobp (AI Input Component ki CSS) --- */
    .container-ai-input {
      --perspective: 1000px;
      --translateY: 45px;
      position: fixed; /* Full screen overlay */
      inset: 0; /* top, right, bottom, left: 0 */
      display: grid;
      grid-template-columns: repeat(5, 1fr);
      transform-style: preserve-3d;
      pointer-events: none; /* Default mein non-interactive */
      z-index: 100; /* Password aur output se upar */
      background-color: rgba(0, 0, 0, 0.7); /* Thoda background blur */
      opacity: 0; /* Initially hidden */
      visibility: hidden; /* Initially hidden */
      transition: opacity 0.3s ease, visibility 0.3s ease;
      place-items: center; /* Center the card in the grid */
    }

    .container-ai-input.active {
        opacity: 1;
        visibility: visible;
        pointer-events: auto; /* Jab active ho to interactive ho jaye */
    }

    .area {
      pointer-events: auto; /* Hover effects ke liye areas ko interactive banaya */
    }

    .container-wrap {
      display: flex;
      align-items: center;
      justify-items: center;
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translateX(-50%) translateY(-50%);
      z-index: 99; /* AI input container ke andar upar */
      transform-style: preserve-3d;
      cursor: pointer;
      padding: 4px;
      transition: all 0.3s ease;
      pointer-events: auto; /* Card ke andar ke elements interactive rahein */
    }

    .container-wrap:hover {
      padding: 0;
    }

    .container-wrap:active {
      transform: translateX(-50%) translateY(-50%) scale(0.95);
    }

    .container-wrap:after {
      content: "";
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translateX(-50%) translateY(-55%);
      width: 12rem;
      height: 11rem;
      background-color: #dedfe0;
      border-radius: 3.2rem;
      transition: all 0.3s ease;
    }

    .container-wrap:hover:after {
      transform: translateX(-50%) translateY(-50%);
      height: 12rem;
    }

    .container-wrap input {
      opacity: 0;
      width: 0;
      height: 0;
      position: absolute;
    }

    .container-wrap input:checked + .card .eyes {
      opacity: 0;
    }

    /* Adjusted size for the chat window when active */
    .container-wrap input:checked + .card .content-card {
      width: 320px; /* Increased width */
      height: 480px; /* Increased height */
    }

    .container-wrap input:checked + .card .background-blur-balls {
      border-radius: 20px;
    }

    .container-wrap input:checked + .card .container-ai-chat {
      opacity: 1;
      visibility: visible;
      z-index: 99999;
      pointer-events: visible;
      transition: opacity 0.3s ease, visibility 0.3s ease;
      display: flex;
      flex-direction: column;
    }

    .card {
      width: 100%;
      height: 100%;
      transform-style: preserve-3d;
      will-change: transform;
      transition: all 0.6s ease;
      border-radius: 3rem;
      display: flex;
      align-items: center;
      transform: translateZ(50px);
      justify-content: center;
      position: relative; /* Essential for absolute positioning of children like the close button */
    }

    .card:hover {
      box-shadow:
        0 10px 40px rgba(0, 0, 60, 0.25),
        inset 0 0 10px rgba(255, 255, 255, 0.5);
    }

    .background-blur-balls {
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translateX(-50%) translateY(-50%);
      width: 100%;
      height: 100%;
      z-index: -10;
      border-radius: 3rem;
      transition: all 0.3s ease;
      background-color: rgba(255, 255, 255, 0.8);
      overflow: hidden;
    }
    .balls {
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translateX(-50%) translateY(-50%);
      animation: rotate-background-balls 10s linear infinite;
    }

    .container-wrap:hover .balls {
      animation-play-state: paused;
    }

    .background-blur-balls .ball {
      width: 6rem;
      height: 6rem;
      position: absolute;
      border-radius: 50%;
      filter: blur(30px);
    }

    .background-blur-balls .ball.violet {
      top: 0;
      left: 50%;
      transform: translateX(-50%);
      background-color: #9147ff;
    }

    .background-blur-balls .ball.green {
      bottom: 0;
      left: 50%;
      transform: translateX(-50%);
      background-color: #34d399;
    }

    .background-blur-balls .ball.rosa {
      top: 50%;
      left: 0;
      transform: translateY(-50%);
      background-color: #ec4899;
    }

    .background-blur-balls .ball.cyan {
      top: 50%;
      right: 0;
      transform: translateY(-50%);
      background-color: #05e0f5;
    }

    .content-card {
      width: 12rem;
      height: 12rem;
      display: flex;
      border-radius: 3rem;
      transition: all 0.3s ease;
      overflow: hidden;
    }

    .background-blur-card {
      width: 100%;
      height: 100%;
      backdrop-filter: blur(50px);
    }

    .eyes {
      position: absolute;
      left: 50%;
      bottom: 50%;
      transform: translateX(-50%);
      display: flex;
      align-items: center;
      justify-content: center;
      height: 52px;
      gap: 2rem;
      transition: all 0.3s ease;
    }
    .eyes .eye {
      width: 26px;
      height: 52px;
      background-color: #fff;
      border-radius: 16px;
      animation: animate-eyes 10s infinite linear;
      transition: all 0.3s ease;
    }


    .eyes.happy {
      display: none;
      color: #fff;
      gap: 0;
    }
    .eyes.happy svg {
      width: 60px;
    }


    .container-wrap:hover .eyes .eye {
      display: none;
    }

    .container-wrap:hover .eyes.happy {
      display: flex;
    }

    .container-ai-chat {
      position: absolute;
      width: 100%;
      height: 100%;
      padding: 6px;
      opacity: 0;
      pointer-events: none;
      visibility: hidden;
      transition: opacity 0.3s ease, visibility 0.3s ease;
      display: flex;
      flex-direction: column;
    }

    .container-wrap .card .chat {
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      border-radius: 15px;
      width: 100%;
      height: 100%;
      padding: 4px;
      overflow: hidden;
      background-color: #ffffff;
      position: relative;
    }

    .chat-messages {
      flex-grow: 1;
      overflow-y: auto;
      padding: 10px;
      display: flex;
      flex-direction: column;
      gap: 8px;
      padding-bottom: 10px;
      min-height: 50px;
    }

    .chat-messages::-webkit-scrollbar {
      width: 6px;
      height: 10px;
    }

    .chat-messages::-webkit-scrollbar-track {
      background: transparent;
    }

    .chat-messages::-webkit-scrollbar-thumb {
      background: #dedfe0;
      border-radius: 5px;
    }

    .chat-messages::-webkit-scrollbar-thumb:hover {
      background: #8b8b8b;
      cursor: pointer;
    }

    .chat-message {
      max-width: 80%;
      padding: 8px 12px;
      border-radius: 15px;
      line-height: 1.4;
      word-wrap: break-word;
    }

    .chat-message.user {
      align-self: flex-end;
      background-color: #3b82f6;
      color: white;
      border-bottom-right-radius: 5px;
      border-top-right-radius: 5px;
    }

    .chat-message.ai {
      align-self: flex-start;
      background-color: #e0e0e0;
      color: #333;
      border-bottom-left-radius: 5px;
      border-top-left-radius: 5px;
    }

    .card .chat .chat-bot {
      position: relative;
      display: flex;
      flex-shrink: 0;
      height: auto;
      min-height: 40px;
      margin-top: auto;
      margin-bottom: 5px;
    }

    .card .chat .chat-bot textarea {
      background-color: transparent;
      border-radius: 16px;
      border: none;
      width: 100%;
      height: auto;
      min-height: 40px;
      max-height: 80px;
      color: #8b8b8b;
      font-family: sans-serif;
      font-size: 12px;
      font-weight: 400;
      padding: 10px;
      resize: none;
      outline: none;
      overflow-y: auto;
    }
    .card .chat .chat-bot textarea::-webkit-scrollbar {
      width: 6px;
      height: 10px;
    }

    .card .chat .chat-bot textarea::-webkit-scrollbar-track {
      background: transparent;
    }

    .card .chat .chat-bot textarea::-webkit-scrollbar-thumb {
      background: #dedfe0;
      border-radius: 5px;
    }

    .card .chat .chat-bot textarea::-webkit-scrollbar-thumb:hover {
      background: #8b8b8b;
      cursor: pointer;
    }

    .card .chat .chat-bot textarea::placeholder {
      color: #dedfe0;
      transition: all 0.3s ease;
    }
    .card .chat .chat-bot textarea:focus::placeholder {
        color: #8b8b8b;
    }

    .card .chat .options {
      display: flex;
      justify-content: space-between;
      align-items: flex-end;
      padding: 0px 10px 10px 10px;
      flex-shrink: 0;
    }

    .card .chat .options .btns-add {
      display: flex;
      gap: 8px;
    }

    .card .chat .options .btns-add button {
      display: flex;
      color: rgba(0, 0, 0, 0.1);
      background-color: transparent;
      border: none;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .card .chat .options .btns-add button:hover {
      transform: translateY(-5px);
      color: #8b8b8b;
    }

    .card .chat .options .btn-submit {
      display: flex;
      padding: 2px;
      background-image: linear-gradient(to top, #ff4141, #9147ff, #3b82f6);
      border-radius: 10px;
      box-shadow: inset 0 6px 2px -4px rgba(255, 255, 255, 0.5);
      cursor: pointer;
      border: none;
      outline: none;
      opacity: 0.7;
      transition: all 0.15s ease;
    }

    .card .chat .options .btn-submit i {
      width: 30px;
      height: 30px;
      padding: 6px;
      background: rgba(0, 0, 0, 0.1);
      border-radius: 10px;
      backdrop-filter: blur(3px);
      color: #cfcfcf;
    }
    .card .chat .options .btn-submit svg {
      transition: all 0.3s ease;
    }
    .card .chat .options .btn-submit:hover {
      opacity: 1;
    }
    .card .chat .options .btn-submit:focus svg {
      color: #f3f6fd;
      filter: drop-shadow(0 0 5px #ffffff);
      transform: scale(1.2) rotate(45deg) translateX(-2px) translateY(1px);
    }

    .card .chat .options .btn-submit:active {
      transform: scale(0.92);
    }

    /* Close button for AI Chat and Face */
    .chat-close-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        border: none;
        border-radius: 50%;
        width: 25px;
        height: 25px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        font-size: 1.2em;
        line-height: 1;
        opacity: 0; /* Hidden by default */
        transition: opacity 0.3s ease;
        z-index: 10;
    }

    /* Make the close button visible when the entire AI overlay is active */
    .container-ai-input.active .chat-close-btn {
        opacity: 1;
    }

    /* Uiverse.io 3D hover effects (unchanged for full overlay) */
    .area:nth-child(15):hover ~ .container-wrap .card,
    .area:nth-child(15):hover ~ .container-wrap .eyes .eye {
      transform: perspective(var(--perspective)) rotateX(-15deg) rotateY(15deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }
    .area:nth-child(14):hover ~ .container-wrap .card,
    .area:nth-child(14):hover ~ .container-wrap .eyes .eye {
      transform: perspective(var(--perspective)) rotateX(-15deg) rotateY(7deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }
    .area:nth-child(13):hover ~ .container-wrap .card,
    .area:nth-child(13):hover ~ .container-wrap .eyes .eye {
      transform: perspective(var(--perspective)) rotateX(-15deg) rotateY(0)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }
    .area:nth-child(12):hover ~ .container-wrap .card,
    .area:nth-child(12):hover ~ .container-wrap .eyes .eye {
      transform: perspective(var(--perspective)) rotateX(-15deg) rotateY(-7deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }
    .area:nth-child(11):hover ~ .container-wrap .card,
    .area:nth-child(11):hover ~ .container-wrap .eyes .eye {
      transform: perspective(var(--perspective)) rotateX(-15deg) rotateY(-15deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }

    .area:nth-child(10):hover ~ .container-wrap .card,
    .area:nth-child(10):hover ~ .container-wrap .eyes .eye {
      transform: perspective(var(--perspective)) rotateX(0) rotateY(15deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }
    .area:nth-child(9):hover ~ .container-wrap .card,
    .area:nth-child(9):hover ~ .container-wrap .eyes .eye {
      transform: perspective(var(--perspective)) rotateX(0) rotateY(7deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }
    .area:nth-child(8):hover ~ .container-wrap .card,
    .area:nth-child(8):hover ~ .container-wrap .eyes .eye {
      transform: perspective(var(--perspective)) rotateX(0) rotateY(0)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }
    .area:nth-child(7):hover ~ .container-wrap .card,
    .area:nth-child(7):hover ~ .container-wrap .eyes .eye {
      transform: perspective(var(--perspective)) rotateX(0) rotateY(-7deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }
    .area:nth-child(6):hover ~ .container-wrap .card,
    .area:nth-child(6):hover ~ .container-wrap .eyes .eye {
      transform: perspective(var(--perspective)) rotateX(0) rotateY(-15deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }

    .area:nth-child(5):hover ~ .container-wrap .card,
    .area:nth-child(5):hover ~ .container-wrap .eyes .eye {
      transform: perspective(var(--perspective)) rotateX(15deg) rotateY(15deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }
    .area:nth-child(4):hover ~ .container-wrap .card,
    .area:nth-child(4):hover ~ .container-wrap .eyes .eye {
      transform: perspective(var(--perspective)) rotateX(15deg) rotateY(7deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }
    .area:nth-child(3):hover ~ .container-wrap .card,
    .area:nth-child(3):hover ~ .container-wrap .eyes .eye {
      transform: perspective(var(--perspective)) rotateX(15deg) rotateY(0)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }
    .area:nth-child(2):hover ~ .container-wrap .card,
    .area:nth-child(2):hover ~ .container-wrap .eyes .eye {
      transform: perspective(var(--perspective)) rotateX(15deg) rotateY(-7deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }
    .area:nth-child(1):hover ~ .container-wrap .card,
    .area:nth-child(1):hover ~ .container-wrap .eyes .eye {
      transform: perspective(var(--perspective)) rotateX(15deg) rotateY(-15deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }

    .area:nth-child(15):hover
      ~ .container-wrap
      .card
      .container-ai-chat
      .chat
      .options
      button,
    .area:nth-child(15):hover
      ~ .container-wrap
      .card
      .container-ai-chat
      .chat
      .chat-bot {
      transform: perspective(var(--perspective)) rotateX(-10deg) rotateY(8deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }

    .area:nth-child(14):hover
      ~ .container-wrap
      .card
      .container-ai-chat
      .chat
      .options
      button,
    .area:nth-child(14):hover
      ~ .container-wrap
      .card
      .container-ai-chat
      .chat
      .chat-bot {
      transform: perspective(var(--perspective)) rotateX(-10deg) rotateY(4deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }

    .area:nth-child(13):hover
      ~ .container-wrap
      .card
      .container-ai-chat
      .chat
      .options
      button,
    .area:nth-child(13):hover
      ~ .container-wrap
      .card
      .container-ai-chat
      .chat
      .chat-bot {
      transform: perspective(var(--perspective)) rotateX(-10deg) rotateY(0deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }

    .area:nth-child(12):hover
      ~ .container-wrap
      .card
      .container-ai-chat
      .chat
      .options
      button,
    .area:nth-child(12):hover
      ~ .container-wrap
      .card
      .container-ai-chat
      .chat
      .chat-bot {
      transform: perspective(var(--perspective)) rotateX(-10deg) rotateY(-4deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }

    .area:nth-child(11):hover
      ~ .container-wrap
      .card
      .container-ai-chat
      .chat
      .chat-bot {
      transform: perspective(var(--perspective)) rotateX(-10deg) rotateY(-8deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }

    .area:nth-child(10):hover
      ~ .container-wrap
      .card
      .container-ai-chat
      .chat
      .options
      button,
    .area:nth-child(10):hover
      ~ .container-wrap
      .card
      .container-ai-chat
      .chat
      .chat-bot {
      transform: perspective(var(--perspective)) rotateX(0deg) rotateY(8deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }

    .area:nth-child(9):hover
      ~ .container-wrap
      .card
      .container-ai-chat
      .chat
      .options
      button,
    .area:nth-child(9):hover
      ~ .container-wrap
      .card
      .container-ai-chat
      .chat
      .chat-bot {
      transform: perspective(var(--perspective)) rotateX(0deg) rotateY(4deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }

    .area:nth-child(8):hover
      ~ .container-wrap
      .card
      .container-ai-chat
      .chat
      .options
      button,
    .area:nth-child(8):hover
      ~ .container-wrap
      .card
      .container-ai-chat
      .chat
      .chat-bot {
      transform: perspective(var(--perspective)) rotateX(0deg) rotateY(0deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }

    .area:nth-child(7):hover
      ~ .container-wrap
      .card
      .container-ai-chat
      .chat
      .options
      button,
    .area:nth-child(7):hover
      ~ .container-wrap
      .card
      .container-ai-chat
      .chat
      .chat-bot {
      transform: perspective(var(--perspective)) rotateX(0deg) rotateY(-4deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }

    .area:nth-child(6):hover
      ~ .container-wrap
      .card
      .container-ai-chat
      .chat
      .chat-bot {
      transform: perspective(var(--perspective)) rotateX(0deg) rotateY(-8deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }

    .area:nth-child(5):hover
      ~ .container-wrap
      .card
      .container-ai-chat
      .chat
      .chat-bot {
      transform: perspective(var(--perspective)) rotateX(10deg) rotateY(8deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }

    .area:nth-child(4):hover
      ~ .container-wrap
      .card
      .container-ai-chat
      .chat
      .chat-bot {
      transform: perspective(var(--perspective)) rotateX(10deg) rotateY(4deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }

    .area:nth-child(3):hover
      ~ .container-wrap
      .card
      .container-ai-chat
      .chat
      .chat-bot {
      transform: perspective(var(--perspective)) rotateX(10deg) rotateY(0deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }

    .area:nth-child(2):hover
      ~ .container-wrap
      .card
      .container-ai-chat
      .chat
      .chat-bot {
      transform: perspective(var(--perspective)) rotateX(10deg) rotateY(-4deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }

    .area:nth-child(1):hover
      ~ .container-wrap
      .card
      .container-ai-chat
      .chat
      .chat-bot {
      transform: perspective(var(--perspective)) rotateX(10deg) rotateY(-8deg)
        translateZ(var(--translateY)) scale3d(1, 1, 1);
    }
    @keyframes rotate-background-balls {
      from {
        transform: translateX(-50%) translateY(-50%) rotate(360deg);
      }
      to {
        transform: translateX(-50%) translateY(-50%) rotate(0);
      }
    }

    @keyframes animate-eyes {
      46% {
        height: 52px;
      }
      48% {
        height: 20px;
      }
      50% {
        height: 52px;
      }
      96% {
        height: 52px;
      }
      98% {
        height: 20px;
      }
      100% {
        height: 52px;
      }
    }
    /* ==================================================================== */

    /* === MODIFIED: Element 1 (.grid) CSS for proper placement === */
    /* From Uiverse.io by marcelodolza */
    .grid {
      --radius: 38px;
      --perspective: 800px;
      --width: 280px;

      /* ORIGINAL: position: absolute; left: 0; right: 0; top: -2.5rem; bottom: -2.5rem; */
      /* MODIFIED: */
      position: relative; /* Output flex container ke andar theek se aaye */
      left: unset;
      right: unset;
      top: unset;
      bottom: unset;
      display: grid;
      grid-template-columns: repeat(5, 1fr);
      height: 300px; /* Ya koi suitable height dein */
      width: var(--width);
      margin: auto; /* Center karne ke liye */
      z-index: 1; /* Make sure it's above other elements if necessary */
    }
    /* ============================================================ */

    /* Element 1: Trafic Card ki baaki CSS (NO CHANGE) */
    .grid .area {
      position: relative;
      z-index: 1;
    }
    .glow,
    .glow-in1,
    .glow-in2,
    .glow-out1,
    .glow-out2 {
      position: absolute;
      overflow: hidden;
      border-radius: inherit;
      filter: brightness(1.5);
      pointer-events: none;
    }
    .glow::before,
    .glow-in1::before,
    .glow-in2::before,
    .glow-out1::before,
    .glow-out2::before {
      transform: translate(-50%, -50%) rotate(45deg);
      position: absolute;
      top: 50%;
      left: 50%;
      width: 180%;
      height: 180%;
      content: "";
      transition: transform 1.5s ease;
    }
    .glow::before {
      z-index: -2;
      background: conic-gradient(
        #b52f2f 0%,
        transparent 20%,
        #cf8030 50%,
        black 60%,
        transparent 80%,
        #b52f2f 100%
      );
    }
    .glow-in1::before {
      background: conic-gradient(
        from 0turn at 50% 30%,
        #b52f2f 12%,
        transparent 17%,
        transparent 90%,
        #b52f2f 100%
      );
    }
    .glow-in2::before {
      background: conic-gradient(
        from 0turn at 45% 60%,
        transparent 30%,
        #cf8030 55%,
        transparent 60%
      );
    }
    .glow {
      filter: blur(18px);
      inset: 5px;
      opacity: 0.5;
      z-index: 3;
    }
    .glow-in1,
    .glow-in2 {
      filter: blur(50px);
      inset: -15px;
      opacity: 0.5;
    }
    .glow-in2 {
      opacity: 0.2;
    }
    .glow-out1 {
      inset: -1px;
      z-index: 1;
      opacity: 0.5;
    }
    .glow-out2 {
      inset: 6px;
      opacity: 1;
    }
    .glow-out2 {
      transform: translateZ(10px);
      border-radius: calc(var(--radius) * 0.8);
    }
    .glow-out1::before,
    .glow-out2::before {
      background: conic-gradient(
        #b52f2f 0%,
        transparent 10%,
        transparent 35%,
        #cf8030 50%,
        transparent 60%,
        transparent 90%,
        #b52f2f 100%
      );
    }

    .wrap:hover .glow::before,
    .wrap:hover .glow-in1::before,
    .wrap:hover .glow-in2::before,
    .wrap:hover .glow-out1::before,
    .wrap:hover .glow-out2::before {
      transform: translate(-50%, -50%) rotate(410deg);
    }
    .wrap {
      display: flex;
      align-items: center;
      justify-items: center;
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translateX(-50%) translateY(-50%);
      z-index: 9;
      border-radius: var(--radius);
    }
    .wrap::before {
      box-shadow:
        0 60px 140px 30px rgba(0, 0, 0, 0.8),
        0 -60px 120px rgba(102, 106, 135, 0.4);
      background: rgba(0, 0, 0, 0.4);
      position: absolute;
      content: "";
      inset: 8px;
      filter: blur(5px);
      border-radius: 50px;
    }

    .card {
      padding: 7px 7px 7px 7px;
      border-radius: inherit;
    }
    .card,
    .glare::before {
      transform-style: preserve-3d;
      will-change: transform;
    }
    .wrap:hover .card {
      transform: perspective(var(--perspective)) rotateX(0) rotateY(0)
        scale3d(1, 1, 1);
    }

    .card-bg {
      content: "";
      position: absolute;
      inset: 0;
      border-radius: inherit;
      background: linear-gradient(to bottom, #1e212b 40%, #0b0c11 100%);
      box-shadow:
        0 15px 20px rgba(0, 0, 0, 0.7),
        inset 0 0 3px rgba(255, 255, 255, 0.1),
        inset 0 29px 5px -31px white;
      z-index: 2;
    }

    .card-content {
      box-shadow:
        inset 0 0 2px rgba(255, 255, 255, 0.1),
        inset 0 0 70px #2e303c,
        inset 40px 70px 30px -20px rgba(0, 0, 0, 0.3),
        inset 0 30px 5px -30px rgba(255, 255, 255, 0.7),
        inset 0 -3px 2px -2px white;
      background: linear-gradient(to bottom, #201c29 40%, #37374b 100%);
      padding: 20px 28px 0 28px;
      border-radius: calc(var(--radius) * 0.8);
      transform-style: preserve-3d;
      transform: translateZ(10px);
      position: relative;
      z-index: 3;
    }
    .card,
    .card-content,
    .glare::before {
      transition: 2s cubic-bezier(0.03, 1, 0.5, 1);
    }

    header {
      line-height: 20px;
      margin-bottom: 3px;
      position: relative;
      transform: translateZ(30px);
      transform-style: preserve-3d;
      color: rgba(255, 255, 255, 0.6);
      transition: all 0.3s ease;
    }
    header .title {
      font-size: 12px;
    }
    header .views {
      font-size: 20px;
      font-weight: 700;
      display: flex;
      align-items: center;
      max-width: 50%;
    }
    header .icon {
      border-radius: 50%;
      font-size: 24px;
      padding: 2px 0 0 0;
      width: 40px;
      height: 40px;
      position: absolute;
      right: -6px;
      top: 0px;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow:
        0 0 1px 2px rgba(250, 187, 15, 0.7),
        0 -3px 2px 5px rgba(0, 0, 0, 0.3),
        0 0 1px 3px black,
        0 3px 3px 2px #ff98a8;
      transform-style: preserve-3d;
      transition: all 0.3s ease;
    }

    header .icon::before,
    header .icon::after {
      content: "";
      position: absolute;
      inset: 1px;
      border-radius: 50%;
      box-shadow: 0 0 1px 2px #fabb0f;
      transition: all 0.3s ease;
      opacity: 0;
      pointer-events: none;
    }
    header .icon:hover::before,
    header .icon:hover::after {
      animation: ring 1.5s ease infinite;
    }
    header .icon:hover::after {
      animation-delay: 750ms;
    }
    header .icon svg {
      display: block;
      animation: heart 1.5s linear infinite;
      pointer-events: none;
    }
    header .icon:hover svg {
      animation-duration: 0.8s;
    }
    header .icon:hover {
      background-color: #1e191e;
    }
    footer:hover,
    header .views:hover .number {
      color: white;
    }
    header span[data-label] {
      position: relative;
      overflow: hidden;
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 10;
      top: 0;
    }
    header span[data-label]::before,
    header span[data-label]::after {
      content: attr(data-label);
      transition: all 0.2s ease;
    }
    header span[data-label]::before {
      left: 0;
      position: absolute;
      transform: translateY(-20px);
      color: white;
    }
    header .views:hover span[data-label]::before {
      transform: translateY(0px);
    }
    header .views:hover span[data-label]::after {
      transform: translateY(20px);
    }

    .number {
      text-align: right;
      overflow: hidden;
      display: flex;
      width: 64px;
    }
    .number::before {
      position: absolute;
      bottom: 0;
      left: 14px;
      content: ",";
    }
    .number > div {
      display: grid;
      width: 12px;
      height: 20px;
      line-height: 20px;
      margin-right: 1px;
      text-align: center;
      animation: units ease 3s forwards;
    }
    .number > div:nth-child(2) {
      margin-left: 7px;
    }
    header .views:hover .number > div {
      animation: none;
    }

    .chart {
      width: var(--width);
    }
    .chart svg {
      display: block;
      width: 100%;
      overflow: visible;
    }
    .chart svg line {
      animation: lines 5s ease calc(1s + var(--i) * 0.05s) infinite;
      opacity: 0;
      stroke: rgba(255, 255, 255, 0.5);
      filter: drop-shadow(0 -4px 1px rgba(0, 0, 0, 0.7));
    }

    footer {
      font-size: 10px;
      font-weight: 500;
      display: flex;
      transform: translateZ(30px) translateY(-3px);
      transition: all 0.3s ease;
      transform-style: preserve-3d;
      margin: -10px -10px 0 -10px;
    }
    footer span {
      width: 100%;
      display: block;
      animation: labels 5s ease calc(1s + var(--i) * 0.1s) infinite;
      opacity: 0;
    }
    footer span::before {
      transition: all 0.2s ease;
      content: attr(data-label);
      display: block;
      text-align: center;
      font-weight: 600;
      width: 100%;
      padding: 15px 0;
      pointer-events: none;
      color: rgba(255, 255, 255, 0.6);
    }
    footer span:hover::before {
      color: white;
      transform: translateY(-5px) scale(1.3);
      text-shadow: 0 7px 3px rgba(0, 0, 0, 0.3);
    }

    .path1-g {
      transform: translateY(-3px);
    }

    .path1,
    .path2 {
      stroke-dasharray: 0 510;
      stroke-dashoffset: 1;
      animation: path 5s ease infinite 1s;
    }

    .path1:nth-child(2),
    .path2:nth-child(2) {
      transform: translateY(5px);
    }

    .glare {
      position: absolute;
      overflow: hidden;
      border-radius: inherit;
      filter: blur(10px);
      inset: 5px;
      opacity: 0.5;
      pointer-events: none;
    }
    .glare::before {
      content: "";
      position: absolute;
      top: 50%;
      left: 50%;
      background: white;
      filter: blur(60px);
      border-radius: 50%;
      width: 100px;
      height: 100px;
      transform: translate(-50%, -50%);
      opacity: 0;
    }

    .area:nth-child(1):hover ~ .wrap .glare::before {
      transform: translate(-200%, -200%);
      opacity: 0.7;
    }
    .area:nth-child(2):hover ~ .wrap .glare::before {
      transform: translate(-120%, -200%) scaleX(1.2);
      opacity: 0.5;
    }
    .area:nth-child(3):hover ~ .wrap .glare::before {
      transform: translate(-50%, -200%) scaleX(1.5);
      opacity: 0.5;
      background-color: #ffc2c2;
    }
    .area:nth-child(4):hover ~ .wrap .glare::before {
      transform: translate(30%, -200%) scaleX(1.2);
      opacity: 0.5;
      background-color: #ff9393;
    }
    .area:nth-child(5):hover ~ .wrap .glare::before {
      transform: translate(110%, -200%);
      opacity: 0.7;
      background-color: #ff5e5e;
    }

    .area:nth-child(6):hover ~ .wrap .glare::before {
      transform: translate(-230%, -50%) scaleY(1.2);
      opacity: 0.7;
      background-color: #fffca6;
    }
    .area:nth-child(7):hover ~ .wrap .glare::before {
      transform: translate(-200%, -50%);
      opacity: 0.5;
      background-color: #fffca6;
    }
    .area:nth-child(8):hover ~ .wrap .glare::before {
      filter: blur(100px);
    }
    .area:nth-child(9):hover ~ .wrap .glare::before {
      transform: translate(110%, -50%);
      opacity: 0.5;
      background-color: #ff9393;
    }
    .area:nth-child(10):hover ~ .wrap .glare::before {
      transform: translate(140%, -50%) scaleY(1.2);
      opacity: 0.7;
      background-color: #ff9393;
    }

    .area:nth-child(11):hover ~ .wrap .glare::before {
      transform: translate(-200%, 100%);
      opacity: 0.7;
      background-color: #fffa5e;
    }
    .area:nth-child(12):hover ~ .wrap .glare::before {
      transform: translate(-120%, 100%) scaleX(1.2);
      opacity: 0.5;
      background-color: #fffca6;
    }
    .area:nth-child(13):hover ~ .wrap .glare::before {
      transform: translate(-50%, 100%) scaleX(1.5);
      opacity: 0.5;
      background-color: #fffdce;
    }
    .area:nth-child(14):hover ~ .wrap .glare::before {
      transform: translate(30%, 100%) scaleX(1.2);
      opacity: 0.5;
    }
    .area:nth-child(15):hover ~ .wrap .glare::before {
      transform: translate(110%, 100%);
      opacity: 0.7;
    }

    .area:nth-child(1):hover ~ .wrap .card {
      transform: perspective(var(--perspective)) rotateX(-15deg) rotateY(15deg)
        scale3d(1, 1, 1);
    }
    .area:nth-child(2):hover ~ .wrap .card {
      transform: perspective(var(--perspective)) rotateX(-15deg) rotateY(7deg)
        scale3d(1, 1, 1);
    }
    .area:nth-child(3):hover ~ .wrap .card {
      transform: perspective(var(--perspective)) rotateX(-15deg) rotateY(0)
        scale3d(1, 1, 1);
    }
    .area:nth-child(4):hover ~ .wrap .card {
      transform: perspective(var(--perspective)) rotateX(-15deg) rotateY(-7deg)
        scale3d(1, 1, 1);
    }
    .area:nth-child(5):hover ~ .wrap .card {
      transform: perspective(var(--perspective)) rotateX(-15deg) rotateY(-15deg)
        scale3d(1, 1, 1);
    }

    .area:nth-child(6):hover ~ .wrap .card {
      transform: perspective(var(--perspective)) rotateX(0) rotateY(15deg)
        scale3d(1, 1, 1);
    }
    .area:nth-child(7):hover ~ .wrap .card {
      transform: perspective(var(--perspective)) rotateX(0) rotateY(7deg)
        scale3d(1, 1, 1);
    }
    .area:nth-child(8):hover ~ .wrap .card {
      transform: perspective(var(--perspective)) rotateX(0) rotateY(0)
        scale3d(1, 1, 1);
    }
    .area:nth-child(9):hover ~ .wrap .card {
      transform: perspective(var(--perspective)) rotateX(0) rotateY(-7deg)
        scale3d(1, 1, 1);
    }
    .area:nth-child(10):hover ~ .wrap .card {
      transform: perspective(var(--perspective)) rotateX(0) rotateY(-15deg)
        scale3d(1, 1, 1);
    }

    .area:nth-child(11):hover ~ .wrap .card {
      transform: perspective(var(--perspective)) rotateX(15deg) rotateY(15deg)
        scale3d(1, 1, 1);
    }
    .area:nth-child(12):hover ~ .wrap .card {
      transform: perspective(var(--perspective)) rotateX(15deg) rotateY(7deg)
        scale3d(1, 1, 1);
    }
    .area:nth-child(13):hover ~ .wrap .card {
      transform: perspective(var(--perspective)) rotateX(15deg) rotateY(0)
        scale3d(1, 1, 1);
    }
    .area:nth-child(14):hover ~ .wrap .card {
      transform: perspective(var(--perspective)) rotateX(15deg) rotateY(-7deg)
        scale3d(1, 1, 1);
    }
    .area:nth-child(15):hover ~ .wrap .card {
      transform: perspective(var(--perspective)) rotateX(15deg) rotateY(-15deg)
        scale3d(1, 1, 1);
    }

    @keyframes labels {
      0% {
        transform: translateY(-30px);
        filter: blur(10px);
      }
      8% {
        transform: translateY(10px);
      }
      15% {
        transform: translateY(0);
        opacity: 1;
        filter: blur(0);
      }
      80% {
        transform: translateY(0);
        opacity: 1;
      }
      85% {
        filter: blur(0px);
        transform: translateY(-5px);
      }
      90% {
        transform: translateY(15px);
        opacity: 0;
        filter: blur(10px);
      }
    }

    @keyframes lines {
      0% {
        transform: translateY(0);
        opacity: 0;
      }
      7% {
        transform: translateY(-20px);
      }
      12% {
        transform: translateY(10px);
      }
      17% {
        transform: translateY(-5px);
      }
      25% {
        transform: translateY(0);
        opacity: 1;
      }

      80% {
        transform: translateY(0);
        opacity: 1;
      }
      85% {
        transform: translateY(-20px);
      }
      90% {
        transform: translateY(20px);
        opacity: 0;
      }
    }

    @keyframes heart {
      5% {
        transform: scale(0.8) translateZ(0px);
      }
      20% {
        transform: scale(1.2) translateZ(40px);
      }
      40% {
        transform: scale(1) translateZ(20px);
      }
      50% {
        transform: scale(1.2) translateZ(30px);
      }
      70% {
        transform: scale(0.8) translateZ(20px);
      }
      100% {
        transform: scale(1) translateZ(0px);
      }
    }

    @keyframes ring {
      0% {
        transform: scale(1);
        opacity: 0;
      }
      30% {
        transform: scale(1);
        opacity: 1;
      }
      100% {
        transform: scale(2);
        opacity: 0;
        filter: blur(5px);
      }
    }

    @keyframes path {
      0% {
      }
      30% {
        stroke-dasharray: 510 510;
      }
      80% {
        stroke-dashoffset: 1;
        stroke-dasharray: 510;
      }
      100% {
        stroke-dashoffset: 1;
        stroke-dashoffset: -510;
      }
    }

    @keyframes units {
      to {
        transform: translateY(calc(-100% * calc(var(--num) + 1)));
      }
    }
    /* ============================================================ */


    /* === NEW: Uiverse.io Button CSS (Chat with AI button ke liye) === */
    .button {
      --primary: #ff5569;
      --neutral-1: #f7f8f7;
      --neutral-2: #e7e7e7;
      --radius: 14px;

      cursor: pointer;
      border-radius: var(--radius);
      text-shadow: 0 1px 1px rgba(0, 0, 0, 0.3);
      border: none;
      box-shadow: 0 0.5px 0.5px 1px rgba(255, 255, 255, 0.2),
        0 10px 20px rgba(0, 0, 0, 0.2), 0 4px 5px 0px rgba(0, 0, 0, 0.05);
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      transition: all 0.3s ease;
      min-width: 200px;
      padding: 20px;
      height: 68px;
      font-family: "Galano Grotesque", Poppins, Montserrat, sans-serif;
      font-style: normal;
      font-size: 18px;
      font-weight: 600;
      /* Adjustments for dark theme */
      background: linear-gradient(to bottom, #2b2b2b, #1a1a1a);
      color: var(--neutral-1);
      margin-top: 50px; /* Space from content above */
      z-index: 1; /* Make sure it's above other normal content */
    }
    .button:hover {
      transform: scale(1.02);
      box-shadow: 0 0 1px 2px rgba(255, 255, 255, 0.3),
        0 15px 30px rgba(0, 0, 0, 0.3), 0 10px 3px -3px rgba(0, 0, 0, 0.04);
    }
    .button:active {
      transform: scale(1);
      box-shadow: 0 0 1px 2px rgba(255, 255, 255, 0.3),
        0 10px 3px -3px rgba(0, 0, 0, 0.2);
    }
    .button:after {
      content: "";
      position: absolute;
      inset: 0;
      border-radius: var(--radius);
      border: 2.5px solid transparent;
      background: linear-gradient(var(--neutral-1), var(--neutral-2)) padding-box,
        linear-gradient(to bottom, rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.45))
          border-box;
      z-index: 0;
      transition: all 0.4s ease;
    }
    .button:hover::after {
      transform: scale(1.05, 1.1);
      box-shadow: inset 0 -1px 3px 0 rgba(255, 255, 255, 1);
    }
    .button::before {
      content: "";
      inset: 7px 6px 6px 6px;
      position: absolute;
      background: linear-gradient(to top, var(--neutral-1), var(--neutral-2));
      border-radius: 30px;
      filter: blur(0.5px);
      z-index: 2;
    }
    .state p {
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .state .icon {
      position: absolute;
      left: 0;
      top: 0;
      bottom: 0;
      margin: auto;
      transform: scale(1.25);
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .state .icon svg {
      overflow: visible;
    }

    /* Outline */
    .outline {
      position: absolute;
      border-radius: inherit;
      overflow: hidden;
      z-index: 1;
      opacity: 0;
      transition: opacity 0.4s ease;
      inset: -2px -3.5px;
    }
    .outline::before {
      content: "";
      position: absolute;
      inset: -100%;
      background: conic-gradient(
        from 180deg,
        transparent 60%,
        white 80%,
        transparent 100%
      );
      animation: spin 2s linear infinite;
      animation-play-state: paused;
    }
    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }
      100% {
        transform: rotate(360deg);
      }
    }
    .button:hover .outline {
      opacity: 1;
    }
    .button:hover .outline::before {
      animation-play-state: running;
    }

    /* Letters */
    .state p span {
      display: block;
      opacity: 0;
      animation: slideDown 0.8s ease forwards calc(var(--i) * 0.03s);
    }
    .button:hover p span {
      opacity: 1;
      animation: wave 0.5s ease forwards calc(var(--i) * 0.02s);
    }
    .button:focus p span {
      opacity: 1;
      animation: disapear 0.6s ease forwards calc(var(--i) * 0.03s);
    }
    @keyframes wave {
      30% {
        opacity: 1;
        transform: translateY(4px) translateX(0) rotate(0);
      }
      50% {
        opacity: 1;
        transform: translateY(-3px) translateX(0) rotate(0);
        color: var(--primary);
      }
      100% {
        opacity: 1;
        transform: translateY(0) translateX(0) rotate(0);
      }
    }
    @keyframes slideDown {
      0% {
        opacity: 0;
        transform: translateY(-20px) translateX(5px) rotate(-90deg);
        color: var(--primary);
        filter: blur(5px);
      }
      30% {
        opacity: 1;
        transform: translateY(4px) translateX(0) rotate(0);
        filter: blur(0);
      }
      50% {
        opacity: 1;
        transform: translateY(-3px) translateX(0) rotate(0);
      }
      100% {
        opacity: 1;
        transform: translateY(0) translateX(0) rotate(0);
      }
    }
    @keyframes disapear {
      from {
        opacity: 1;
      }
      to {
        opacity: 0;
        transform: translateX(5px) translateY(20px);
        color: var(--primary);
        filter: blur(5px);
      }
    }

    /* Plane */
    .state--default .icon svg {
      animation: land 0.6s ease forwards;
    }
    .button:hover .state--default .icon {
      transform: rotate(45deg) scale(1.25);
    }
    .button:focus .state--default svg {
      animation: takeOff 0.8s linear forwards;
    }
    .button:focus .state--default .icon {
      transform: rotate(0) scale(1.25);
    }
    @keyframes takeOff {
      0% {
        opacity: 1;
      }
      60% {
        opacity: 1;
        transform: translateX(70px) rotate(45deg) scale(2);
      }
      100% {
        opacity: 0;
        transform: translateX(160px) rotate(45deg) scale(0);
      }
    }
    @keyframes land {
      0% {
        transform: translateX(-60px) translateY(30px) rotate(-50deg) scale(2);
        opacity: 0;
        filter: blur(3px);
      }
      100% {
        transform: translateX(0) translateY(0) rotate(0);
        opacity: 1;
        filter: blur(0);
      }
    }

    /* Contrail */
    .state--default .icon:before {
      content: "";
      position: absolute;
      top: 50%;
      height: 2px;
      width: 0;
      left: -5px;
      background: linear-gradient(to right, transparent, rgba(0, 0, 0, 0.5));
    }
    .button:focus .state--default .icon:before {
      animation: contrail 0.8s linear forwards;
    }
    @keyframes contrail {
      0% {
        width: 0;
        opacity: 1;
      }
      8% {
        width: 15px;
      }
      60% {
        opacity: 0.7;
        width: 80px;
      }
      100% {
        opacity: 0;
        width: 160px;
      }
    }

    /* States */
    .state {
      padding-left: 29px;
      z-index: 2;
      display: flex;
      position: relative;
    }
    .state--default span:nth-child(4) {
      margin-right: 5px;
    }
    .state--sent {
      display: none;
    }
    .state--sent svg {
      transform: scale(1.25);
      margin-right: 8px;
    }
    .button:focus .state--default {
      position: absolute;
    }
    .button:focus .state--sent {
      display: flex;
    }
    .button:focus .state--sent span {
      opacity: 0;
      animation: slideDown 0.8s ease forwards calc(var(--i) * 0.2s);
    }
    .button:focus .state--sent .icon svg {
      opacity: 0;
      animation: appear 1.2s ease forwards 0.8s;
    }
    @keyframes appear {
      0% {
        opacity: 0;
        transform: scale(4) rotate(-40deg);
        color: var(--primary);
        filter: blur(4px);
      }
      30% {
        opacity: 1;
        transform: scale(0.6);
        filter: blur(1px);
      }
      50% {
        opacity: 1;
        transform: scale(1.2);
        filter: blur(0);
      }
      100% {
        opacity: 1;
        transform: scale(1);
      }
    }
    /* ============================================================ */

  </style>
</head>
<body>

  <h2 id="heading">Enter the code</h2>

  <div class="password" id="password-box">
    <input maxlength="1" class="input" type="text" />
    <input maxlength="1" class="input" type="text" />
    <input maxlength="1" class="input" type="text" />
    <input maxlength="1" class="input" type="text" />
    <input maxlength="1" class="input" type="text" />
    <input maxlength="1" class="input" type="text" />
  </div>

  <div id="output"></div>

  <!-- === MODIFIED: NEW AI Chat Trigger Button HTML === -->
  <button class="button" id="ai-chat-trigger">
    <div class="outline"></div>
    <div class="state state--default">
      <div class="icon">
        <svg
          width="1em"
          height="1em"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <g style="filter: url(#shadow)">
            <path
              d="M14.2199 21.63C13.0399 21.63 11.3699 20.8 10.0499 16.83L9.32988 14.67L7.16988 13.95C3.20988 12.63 2.37988 10.96 2.37988 9.78001C2.37988 8.61001 3.20988 6.93001 7.16988 5.60001L15.6599 2.77001C17.7799 2.06001 19.5499 2.27001 20.6399 3.35001C21.7299 4.43001 21.9399 6.21001 21.2299 8.33001L18.3999 16.82C17.0699 20.8 15.3999 21.63 14.2199 21.63ZM7.63988 7.03001C4.85988 7.96001 3.86988 9.06001 3.86988 9.78001C3.86988 10.5 4.85988 11.6 7.63988 12.52L10.1599 13.36C10.3799 13.43 10.5599 13.61 10.6299 13.83L11.4699 16.35C12.3899 19.13 13.4999 20.12 14.2199 20.12C14.9399 20.12 16.0399 19.13 16.9699 16.35L19.7999 7.86001C20.3099 6.32001 20.2199 5.06001 19.5699 4.41001C18.9199 3.76001 17.6599 3.68001 16.1299 4.19001L7.63988 7.03001Z"
              fill="currentColor"
            ></path>
            <path
              d="M10.11 14.4C9.92005 14.4 9.73005 14.33 9.58005 14.18C9.29005 13.89 9.29005 13.41 9.58005 13.12L13.16 9.53C13.45 9.24 13.93 9.24 14.22 9.53C14.51 9.82 14.51 10.3 14.22 10.59L10.64 14.18C10.5 14.33 10.3 14.4 10.11 14.4Z"
              fill="currentColor"
            ></path>
          </g>
          <defs>
            <filter id="shadow">
              <fedropshadow
                dx="0"
                dy="1"
                stdDeviation="0.6"
                flood-opacity="0.5"
              ></fedropshadow>
            </filter>
          </defs>
        </svg>
      </div>
      <p>
        <span style="--i:0">C</span>
        <span style="--i:1">h</span>
        <span style="--i:2">a</span>
        <span style="--i:3">t</span>
        <span style="--i:4"> </span> <!-- Space character -->
        <span style="--i:5">w</span>
        <span style="--i:6">i</span>
        <span style="--i:7">t</span>
        <span style="--i:8">h</span>
        <span style="--i:9"> </span> <!-- Space character -->
        <span style="--i:10">A</span>
        <span style="--i:11">I</span>
      </p>
    </div>
    <div class="state state--sent">
      <div class="icon">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          height="1em"
          width="1em"
          stroke-width="0.5px"
          stroke="black"
        >
          <g style="filter: url(#shadow)">
            <path
              fill="currentColor"
              d="M12 22.75C6.07 22.75 1.25 17.93 1.25 12C1.25 6.07 6.07 1.25 12 1.25C17.93 1.25 22.75 6.07 22.75 12C22.75 17.93 17.93 22.75 12 22.75ZM12 2.75C6.9 2.75 2.75 6.9 2.75 12C2.75 17.1 6.9 21.25 12 21.25C17.1 21.25 21.25 17.1 21.25 12C21.25 6.9 17.1 2.75 12 2.75Z"
            ></path>
            <path
              fill="currentColor"
              d="M10.5795 15.5801C10.3795 15.5801 10.1895 15.5001 10.0495 15.3601L7.21945 12.5301C6.92945 12.2401 6.92945 11.7601 7.21945 11.4701C7.50945 11.1801 7.98945 11.1801 8.27945 11.4701L10.5795 13.7701L15.7195 8.6301C16.0095 8.3401 16.4895 8.3401 16.7795 8.6301C17.0695 8.9201 17.0695 9.4001 16.7795 9.6901L11.1095 15.3601C10.9695 15.5001 10.7795 15.5801 10.5795 15.5801Z"
            ></path>
          </g>
          <filter id="shadow">
            <fedropshadow
              dx="0"
              dy="1"
              stdDeviation="0.6"
              flood-opacity="0.5"
            ></fedropshadow>
          </filter>
        </svg>
      </div>
      <p>
        <span style="--i:0">C</span>
        <span style="--i:1">h</span>
        <span style="--i:2">a</span>
        <span style="--i:3">t</span>
        <span style="--i:4"> </span> <!-- Space character -->
        <span style="--i:5">N</span>
        <span style="--i:6">o</span>
        <span style="--i:7">w</span>
      </p>
    </div>
  </button>
  <!-- ============================================================ -->


  <!-- AI Input Component Yahan se Shuru Hota Hai -->
  <div class="container-ai-input">
    <!-- The 'area' divs are for the interactive 3D effect -->
    <div class="area"></div>
    <div class="area"></div>
    <div class="area"></div>
    <div class="area"></div>
    <div class="area"></div>
    <div class="area"></div>
    <div class="area"></div>
    <div class="area"></div>
    <div class="area"></div>
    <div class="area"></div>
    <div class="area"></div>
    <div class="area"></div>
    <div class="area"></div>
    <div class="area"></div>
    <div class="area"></div>
    <label class="container-wrap">
      <input type="checkbox" id="chat-toggle" />
      <div class="card">
        <button class="chat-close-btn" id="ai-chat-main-close-btn">&times;</button>
        <div class="background-blur-balls">
          <div class="balls">
            <span class="ball rosa"></span>
            <span class="ball violet"></span>
            <span class="ball green"></span>
            <span class="ball cyan"></span>
          </div>
        </div>
        <div class="content-card">
          <div class="background-blur-card">
            <div class="eyes">
              <span class="eye"></span>
              <span class="eye"></span>
            </div>
            <div class="eyes happy">
              <svg fill="none" viewBox="0 0 24 24">
                <path
                  fill="currentColor"
                  d="M8.28386 16.2843C8.9917 15.7665 9.8765 14.731 12 14.731C14.1235 14.731 15.0083 15.7665 15.7161 16.2843C17.8397 17.8376 18.7542 16.4845 18.9014 15.7665C19.4323 13.1777 17.6627 11.1066 17.3088 10.5888C16.3844 9.23666 14.1235 8 12 8C9.87648 8 7.61556 9.23666 6.69122 10.5888C6.33728 11.1066 4.56771 13.1777 5.09858 15.7665C5.24582 16.4845 6.16034 17.8376 8.28386 16.2843Z"
                ></path>
              </svg>
              <svg fill="none" viewBox="0 0 24 24">
                <path
                  fill="currentColor"
                  d="M8.28386 16.2843C8.9917 15.7665 9.8765 14.731 12 14.731C14.1235 14.731 15.0083 15.7665 15.7161 16.2843C17.8397 17.8376 18.7542 16.4845 18.9014 15.7665C19.4323 13.1777 17.6627 11.1066 17.3088 10.5888C16.3844 9.23666 14.1235 8 12 8C9.87648 8 7.61556 9.23666 6.69122 10.5888C6.33728 11.1066 4.56771 13.1777 5.09858 15.7665C5.24582 16.4845 6.16034 17.8376 8.28386 16.2843Z"
                ></path>
              </svg>
            </div>
          </div>
        </div>
        <div class="container-ai-chat">
          <div class="chat">
            <div class="chat-messages" id="ai-chat-messages">
              <div class="chat-message ai">
                <p>Hello! How can I help you today?</p>
              </div>
            </div>
            <div class="chat-bot">
              <textarea
                placeholder="Imagine Something...✦˚"
                name="chat_bot"
                id="chat_bot"
              ></textarea>
            </div>
            <div class="options">
              <div class="btns-add">
                <!-- Extra buttons removed as requested -->
              </div>
              <button class="btn-submit" id="send-message-btn" aria-label="Send message">
                <i>
                  <svg viewBox="0 0 512 512">
                    <path
                      d="M473 39.05a24 24 0 0 0-25.5-5.46L47.47 185h-.08a24 24 0 0 0 1 45.16l.41.13l137.3 58.63a16 16 0 0 0 15.54-3.59L422 80a7.07 7.07 0 0 1 10 10L226.66 310.26a16 16 0 0 0-3.59 15.54l58.65 137.38c.06.2.12.38.19.57c3.2 9.27 11.3 15.81 21.09 16.25h1a24.63 24.63 0 0 0 23-15.46L478.39 64.62A24 24 0 0 0 473 39.05"
                      fill="currentColor"
                    ></path>
                  </svg>
                </i>
              </button>
            </div>
          </div>
        </div>
      </div>
    </label>
  </div>
  <!-- AI Input Component Yahan Par Khatam Hota Hai -->

  <script type="module">
    // Firebase SDK imports for client-side functionality (Analytics, etc.)
    // Note: This Firebase config is NOT used for the AI chat logic.
    // The AI chat is now entirely client-side and "fake" for security.
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
    import { getAnalytics } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-analytics.js";

    // Your web app's Firebase configuration
    const firebaseConfig = {
      apiKey: "AIzaSyCu-j4jpX89hE3zihqb6Ibet22syYFDh1o",
      authDomain: "scriptobot-1.firebaseapp.com",
      projectId: "scriptobot-1",
      storageBucket: "scriptobot-1.firebasestorage.app",
      messagingSenderId: "463059915239",
      appId: "1:463059915239:web:9a5446d23c2c19286b6d42",
      measurementId: "G-X027DDY1PN"
    };

    // Initialize Firebase client-side services (e.g., Analytics)
    const app = initializeApp(firebaseConfig);
    const analytics = getAnalytics(app);

    document.addEventListener('DOMContentLoaded', () => {
      const chatInput = document.getElementById('chat_bot');
      const sendMessageBtn = document.getElementById('send-message-btn');
      const chatToggle = document.getElementById('chat-toggle');
      const aiInputContainer = document.querySelector('.container-ai-input');
      const aiChatMainCloseButton = document.getElementById('ai-chat-main-close-btn');
      const chatMessagesContainer = document.getElementById('ai-chat-messages');
      const aiChatTriggerButton = document.getElementById('ai-chat-trigger');
      const output = document.getElementById("output");
      const inputs = document.querySelectorAll(".password .input");
      const containerWrap = document.querySelector('.container-wrap'); // Label element for the AI face/card

      // Function to add messages to the chat display
      function addMessageToChat(sender, text) {
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('chat-message', sender);
        messageDiv.innerHTML = `<p>${text}</p>`;
        chatMessagesContainer.appendChild(messageDiv);
        chatMessagesContainer.scrollTop = chatMessagesContainer.scrollHeight;
      }

      // --- FAKE AI RESPONSE LOGIC (CLIENT-SIDE ONLY) ---
      const getFakeAIResponse = async (userMessage) => {
        const normalizedMessage = userMessage.toLowerCase().trim();

        // Simulate a small delay for "thinking"
        await new Promise(resolve => setTimeout(resolve, 500));

        if (normalizedMessage.includes("hi") || normalizedMessage.includes("hello")) {
            return "Hello! Welcome to my portfolio. How can I assist you today?";
        } else if (normalizedMessage === "how are you") {
          return "I'm just a program, but I'm doing great! How about you?";
        } else if (
          normalizedMessage.includes("about this site") ||
          normalizedMessage.includes("what is this site") ||
          normalizedMessage.includes("tell me about this site") ||
          normalizedMessage.includes("your portfolio")
        ) {
          return "This is my personal portfolio website where you can explore my projects, skills, and experience. Feel free to browse around!";
        } else if (normalizedMessage === "15-5-2008") {
            return "To see the magic, first type 'script' into the code area and press Enter, then type 'tobot' and press Enter. Enjoy the show!";
        }
        else {
          return "Sorry, I can only chat about specific topics right now. Try asking 'hi', 'how are you', or 'about this site'.";
        }
      };
      // --- END FAKE AI RESPONSE LOGIC ---


      // Function to send message
      const sendMessage = async () => {
        const userMessage = chatInput.value.trim();

        if (userMessage) {
          addMessageToChat('user', userMessage);
          chatInput.value = '';
          chatInput.style.height = 'auto'; // Reset textarea height
          chatMessagesContainer.scrollTop = chatMessagesContainer.scrollHeight;

          addMessageToChat('ai', 'Typing...'); // Show typing indicator
          chatMessagesContainer.scrollTop = chatMessagesContainer.scrollTop; // Keep scroll at bottom

          const aiText = await getFakeAIResponse(userMessage); // Get fake AI response

          // Remove typing indicator before showing the actual response
          const lastMessage = chatMessagesContainer.lastChild;
          if (lastMessage && lastMessage.classList.contains('ai') && lastMessage.querySelector('p').innerText === 'Typing...') {
              lastMessage.remove();
          }
          addMessageToChat('ai', aiText);
        }
      };

      // Send button click listener
      sendMessageBtn.addEventListener('click', sendMessage);

      // Enter key listener for chat input
      chatInput.addEventListener('keydown', (event) => {
        if (event.key === 'Enter' && !event.shiftKey) {
          event.preventDefault();
          sendMessage();
        }
      });

      // Auto-adjust textarea height
      chatInput.addEventListener('input', () => {
        chatInput.style.height = 'auto';
        chatInput.style.height = (chatInput.scrollHeight) + 'px';
        chatMessagesContainer.scrollTop = chatMessagesContainer.scrollHeight; // Keep scroll at bottom
      });

      // --- Customization for AI Chat Opening Behavior ---

      // 1. "Chat with AI" trigger button click: Shows the AI face (overlay) but keeps chatbox closed.
      if (aiChatTriggerButton) {
          aiChatTriggerButton.addEventListener('click', () => {
              aiInputContainer.classList.add('active'); // AI overlay ko dikhayein
              chatToggle.checked = false; // Chat card ko initialy expand na karein, sirf face dikhayein.
          });
      }

      // 2. Face (card) par click karne se chatbox khulega (chatToggle checkbox se controlled).
      // 'change' event listener on the checkbox to handle chatbox opening/focusing
      chatToggle.addEventListener('change', () => {
        if (chatToggle.checked) {
          // Chatbox ab open ho gaya hai, input par focus karein
          setTimeout(() => { // Thoda delay dein CSS transition ke liye
            chatInput.focus();
            chatMessagesContainer.scrollTop = chatMessagesContainer.scrollHeight;
          }, 100);
        } else {
          // Chatbox band ho raha hai, focus hata dein
          chatInput.blur();
        }
      });

      // 3. AI chat main close button functionality: Overlay aur chat dono ko band karega.
      if (aiChatMainCloseButton) {
        aiChatMainCloseButton.addEventListener('click', (event) => {
            event.stopPropagation(); // Event ko label tak bubble hone se rokein
            aiInputContainer.classList.remove('active'); // Hide the entire AI overlay
            chatToggle.checked = false; // Ensure chat card is collapsed (face bhi band ho jayega)
            chatInput.blur(); // Chat input se focus hata dein
        });
      }

      // --- End Customization for AI Chat Opening Behavior ---


      // Password logic
      let wrongCodeTimeout; // To clear previous wrong code messages

      function displayWrongCodeMessage() {
        // Clear any existing wrong code message
        hideWrongCodeMessage();

        const wrongCodeDiv = document.createElement('div');
        wrongCodeDiv.id = 'wrong-code-output';
        wrongCodeDiv.classList.add('wrong-code-message');
        wrongCodeDiv.innerHTML = '⚠️ Wrong Code! Please try again.';
        output.appendChild(wrongCodeDiv);

        // Remove after 3 seconds
        wrongCodeTimeout = setTimeout(() => {
          hideWrongCodeMessage();
        }, 3000);
      }

      function hideWrongCodeMessage() {
        clearTimeout(wrongCodeTimeout); // Clear any pending timeout
        const wrongCodeDiv = document.getElementById('wrong-code-output');
        if (wrongCodeDiv) {
          wrongCodeDiv.remove();
        }
      }

      inputs.forEach((input, i) => {
        input.addEventListener("input", () => {
          hideWrongCodeMessage(); // Hide on any new input
          if (input.value && i < inputs.length - 1) {
            inputs[i + 1].focus();
          }
        });
        input.addEventListener("keydown", (e) => {
          if (e.key === "Backspace" && !input.value && i > 0) {
            inputs[i - 1].focus();
            hideWrongCodeMessage(); // Hide on backspace
          }
        });
      });

      document.addEventListener("keydown", (e) => {
        if (e.key === "Enter") {
          const code = Array.from(inputs).map(i => i.value).join("").toLowerCase();

          if (code === "script") {
            inputs.forEach(i => i.value = "");
            inputs[0].focus();
            output.innerHTML = "";
            hideWrongCodeMessage();
          } else if (code === "tobot") {
            document.getElementById("heading").style.display = "none";
            document.getElementById("password-box").style.display = "none";
            document.body.style.background = "black";
            hideWrongCodeMessage(); // Hide wrong code if it was there

            output.innerHTML = `
              <div class="reveal">Wahid</div>
              <div class="futures">
                <div class="futures-text">
                  The future belongs to those who understand the language of technology.
                  Artificial Intelligence is not just reshaping industries — it’s redefining
                  what’s possible. From automation and creative intelligence to self-evolving
                  systems, AI is building a world where innovation has no boundaries.
                  My vision is to stand at the forefront of this transformation, creating
                  intelligent systems that think, learn, and inspire.
                  In a future driven by data and powered by imagination,
                  only those who dare to innovate will truly lead the way. 🚀
                </div>
                <div id="dynamic-features" class="dynamic-features">
                  <button id="feature-1-btn" class="feature-button">My Project Ideas</button>
                  <div id="feature-1-content" class="feature-content" style="display:none;">
                    <h3>Project 1: Smart Home Assistant</h3>
                    <p>This AI-powered assistant can control smart devices, manage schedules, and learn user preferences. It uses natural language processing for voice commands and integrates with various APIs.</p>
                  </div>

                  <button id="feature-2-btn" class="feature-button">AI Ethics & Principles</button>
                  <div id="feature-2-content" class="feature-content" style="display:none;">
                    <h3>Ethical AI Development</h3>
                    <p>Focus on fairness, transparency, and accountability. Avoid bias in datasets, ensure user privacy, and design for human well-being. Regular audits and community feedback are crucial.</p>
                  </div>

                  <button id="feature-3-btn" class="feature-button">Upcoming Innovations</button>
                  <div id="feature-3-content" class="feature-content" style="display:none;">
                    <h3>Next-Gen AI Research</h3>
                    <p>Exploring advanced neural architectures, quantum computing integration for AI, and personalized learning systems that adapt in real-time. Stay tuned for breakthroughs!</p>
                  </div>
                </div>
              </div>

              <!-- === NEW: Element 1: Trafic Card HTML with IDs === -->
              <div class="grid" style="position: relative; margin-top: 50px; z-index: 1;">
                <div class="area"></div>
                <div class="area"></div>
                <div class="area"></div>
                <div class="area"></div>
                <div class="area"></div>
                <div class="area"></div>
                <div class="area"></div>
                <div class="area"></div>
                <div class="area"></div>
                <div class="area"></div>
                <div class="area"></div>
                <div class="area"></div>
                <div class="area"></div>
                <div class="area"></div>
                <div class="area"></div>
                <div class="wrap">
                  <div class="card">
                    <div class="glow-out1"></div>
                    <div class="glow-out2"></div>
                    <div class="glow"></div>
                    <div class="card-bg"></div>
                    <div class="card-content">
                      <div class="glare"></div>
                      <div class="glow-in1"></div>
                      <div class="glow-in2"></div>
                      <header>
                        <p class="title">Trafic</p>
                        <div class="views">
                          <div class="number" id="traffic-card-views-number">
                            <div style="--num: 2" id="traffic-digit-1"><span>2</span><span>0</span><span>1</span><span>2</span></div>
                            <div style="--num: 6" id="traffic-digit-2"><span>6</span><span>0</span><span>1</span><span>2</span><span>3</span><span>4</span><span>5</span><span>6</span></div>
                            <div style="--num: 7" id="traffic-digit-3"><span>7</span><span>0</span><span>1</span><span>2</span><span>3</span><span>4</span><span>5</span><span>6</span><span>7</span></div>
                            <div style="--num: 0" id="traffic-digit-4"><span>0</span></div>
                          </div>
                          <span data-label="views"></span>
                        </div>

                        <div class="icon">
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 24 24"
                            fill="currentColor"
                            width="1em"
                            height="1em"
                          >
                            <defs>
                              <linearGradient id="gradient" x1="0" x2="0" y1="0" y2="1">
                                <stop offset="0%" stop-color="#ffd867"></stop>
                                <stop offset="70%" stop-color="#ec526b"></stop>
                              </linearGradient>
                            </defs>
                            <path
                              fill="url(#gradient)"
                              d="m11.645 20.91-.007-.003-.022-.012a15.247 15.247 0 0 1-.383-.218 25.18 25.18 0 0 1-4.244-3.17C4.688 15.36 2.25 12.174 2.25 8.25 2.25 5.322 4.714 3 7.688 3A5.5 5.5 0 0 1 12 5.052 5.5 5.5 0 0 1 16.313 3c2.973 0 5.437 2.322 5.437 5.25 0 3.925-2.438 7.111-4.739 9.256a25.175 25.175 0 0 1-4.244 3.17 15.247 15.247 0 0 1-.383.219l-.022.012-.007.004-.003.001a.752.752 0 0 1-.704 0l-.003-.001Z"
                            ></path>
                          </svg>
                        </div>
                      </header>
                      <div class="chart">
                        <svg
                          width="389"
                          height="145"
                          viewBox="0 0 389 175"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <defs>
                            <linearGradient
                              id="gradientPath1"
                              x1="0%"
                              x2="100%"
                              y1="0%"
                              y2="0%"
                            >
                              <stop offset="1%" stop-color="#ffc800"></stop>
                              <stop offset="7%" stop-color="#ff694a"></stop>
                              <stop offset="40%" stop-color="orange"></stop>
                              <stop offset="60%" stop-color="#fa874b"></stop>
                              <stop offset="70%" stop-color="#e8a2ab"></stop>
                              <stop offset="90%" stop-color="#ff495c"></stop>
                            </linearGradient>
                            <linearGradient
                              id="gradientPath1b"
                              x1="0%"
                              x2="100%"
                              y1="0%"
                              y2="0%"
                            >
                              <stop offset="0%" stop-color="white"></stop>
                              <stop offset="10%" stop-color="#fa4b5b"></stop>
                              <stop offset="20%" stop-color="white"></stop>
                              <stop offset="70%" stop-color="orange"></stop>
                              <stop offset="80%" stop-color="#ffe7e1"></stop>
                            </linearGradient>

                            <linearGradient id="gradientPath2" x2="100%" y1="0%" y2="0%">
                              <stop offset="0%" stop-color="#c78484"></stop>
                              <stop offset="50%" stop-color="#ab959b"></stop>
                              <stop offset="70%" stop-color="#c78484"></stop>
                              <stop offset="80%" stop-color="#e8a2ab"></stop>
                              <stop offset="100%" stop-color="#4a3b44"></stop>
                            </linearGradient>
                            <linearGradient id="gradientPath2b" x2="100%" y1="0%" y2="0%">
                              <stop offset="0%" stop-color="#482948"></stop>
                              <stop offset="5%" stop-color="#9f3737"></stop>
                              <stop offset="15%" stop-color="#c78484"></stop>
                              <stop offset="30%" stop-color="#332a38"></stop>
                              <stop offset="50%" stop-color="#332a38"></stop>
                              <stop offset="70%" stop-color="#da4847"></stop>
                              <stop offset="85%" stop-color="#372c37"></stop>
                              <stop offset="100%" stop-color="#442b35"></stop>
                            </linearGradient>
                          </defs>
                          <line
                            style="--i: 1"
                            x1="3"
                            y1="162.5"
                            x2="389"
                            y2="162.5"
                            stroke-opacity="0.9"
                          ></line>
                          <line
                            style="--i: 2"
                            x1="3"
                            y1="125.5"
                            x2="389"
                            y2="125.5"
                            stroke-opacity="0.8"
                          ></line>
                          <line
                            style="--i: 3"
                            x1="3"
                            y1="88.5"
                            x2="389"
                            y2="88.5"
                            stroke-opacity="0.7"
                          ></line>
                          <line
                            style="--i: 4"
                            x1="3"
                            y1="51.5"
                            x2="389"
                            y2="51.5"
                            stroke-opacity="0.6"
                          ></line>
                          <line
                            style="--i: 5"
                            x1="3"
                            y1="14.5"
                            x2="389"
                            y2="14.5"
                            stroke-opacity="0.5"
                          ></line>
                          <g filter="url('#goo')" class="path1-g">
                            <path
                              class="path1"
                              d="M5.5 174.5C20.0137 109.586 20 54.9643 49.5 36C79 17.0357 140.5 101 179 93C217.5 85 230.438 40.7006 274.5 36.5C318.562 32.2994 334.5 33 372.5 21"
                              stroke="url(#gradientPath1b)"
                              stroke-width="11"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            ></path>

                            <path
                              class="path1"
                              d="M5.5 174.5C20.0137 109.586 20 54.9643 49.5 36C79 17.0357 140.5 101 179 93C217.5 85 230.438 40.7006 274.5 36.5C318.562 32.2994 334.5 33 372.5 21"
                              stroke="url(#gradientPath1)"
                              stroke-width="11"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            ></path>
                          </g>

                          <g filter="url('#goo')">
                            <path
                              class="path2"
                              stroke="url(#gradientPath2)"
                              d="M21.5 6C57.8366 66.5908 89.5 112.167 124.5 108C159.5 103.833 182.5 49 226 38.5C269.5 28 286.5 52.5 323.5 52.5C331.5 52.5 339 52 350 46.5"
                              stroke-width="11"
                              stroke-linecap="round"
                            ></path>

                            <path
                              class="path2"
                              stroke="url(#gradientPath2b)"
                              d="M21.5 6C57.8366 66.5908 89.5 112.167 124.5 108C159.5 103.833 182.5 49 226 38.5C269.5 28 286.5 52.5 323.5 52.5C331.5 52.5 339 52 350 46.5"
                              stroke-width="11"
                              stroke-linecap="round"
                            ></path>
                          </g>
                          <filter id="goo">
                            <feGaussianBlur
                              stdDeviation="2"
                              result="blur"
                              in="SourceGraphic"
                            ></feGaussianBlur>
                            <feColorMatrix
                              result="goo"
                              values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7"
                              mode="matrix"
                            ></feColorMatrix>
                          </filter>
                        </svg>
                      </div>
                      <footer>
                        <span style="--i: 1" data-label="8am"></span>
                        <span style="--i: 2" data-label="10am"></span>
                        <span style="--i: 3" data-label="12pm"></span>
                        <span style="--i: 4" data-label="2pm"></span>
                        <span style="--i: 5" data-label="4pm"></span>
                        <span style="--i: 6" data-label="6pm"></span>
                      </footer>
                    </div>
                  </div>
                </div>
              </div>
              <!-- ============================================================ -->

              <!-- === NEW: Element 2: Performance Analytics Card HTML with IDs === -->
              <div
                class="group relative flex w-80 flex-col rounded-xl bg-slate-950 p-4 shadow-2xl transition-all duration-300 hover:scale-[1.02] hover:shadow-indigo-500/20"
                style="position: relative; z-index: 50; margin-top: 50px;"
              >
                <div
                  class="absolute inset-0 rounded-xl bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 opacity-20 blur-sm transition-opacity duration-300 group-hover:opacity-30"
                ></div>
                <div class="absolute inset-px rounded-[11px] bg-slate-950"></div>

                <div class="relative">
                  <div class="mb-4 flex items-center justify-between">
                    <div class="flex items-center gap-2">
                      <div
                        class="flex h-8 w-8 items-center justify-center rounded-lg bg-gradient-to-br from-indigo-500 to-purple-500"
                      >
                        <svg
                          class="h-4 w-4 text-white"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke="currentColor"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"
                          ></path>
                        </svg>
                      </div>
                      <h3 class="text-sm font-semibold text-white">Performance Analytics</h3>
                    </div>

                    <span
                      class="flex items-center gap-1 rounded-full bg-emerald-500/10 px-2 py-1 text-xs font-medium text-emerald-500"
                    >
                      <span class="h-1.5 w-1.5 rounded-full bg-emerald-500"></span>
                      Live
                    </span>
                  </div>

                  <div class="mb-4 grid grid-cols-2 gap-4">
                    <div class="rounded-lg bg-slate-900/50 p-3">
                      <p class="text-xs font-medium text-slate-400">Total Views</p>
                      <p class="text-lg font-semibold text-white" id="perf-total-views">24.5K</p>
                      <span class="text-xs font-medium text-emerald-500" id="perf-total-views-percent">+12.3%</span>
                    </div>

                    <div class="rounded-lg bg-slate-900/50 p-3">
                      <p class="text-xs font-medium text-slate-400">Trafic</p>
                      <p class="text-lg font-semibold text-white" id="perf-traffic">1.2K</p>
                      <span class="text-xs font-medium text-emerald-500" id="perf-traffic-percent">+8.1%</span>
                    </div>
                  </div>

                  <div
                    class="mb-4 h-24 w-full overflow-hidden rounded-lg bg-slate-900/50 p-3"
                  >
                    <div class="flex h-full w-full items-end justify-between gap-1">
                      <div class="h-[40%] w-3 rounded-sm bg-indigo-500/30">
                        <div
                          class="h-[60%] w-full rounded-sm bg-indigo-500 transition-all duration-300"
                        ></div>
                      </div>
                      <div class="h-[60%] w-3 rounded-sm bg-indigo-500/30">
                        <div
                          class="h-[40%] w-full rounded-sm bg-indigo-500 transition-all duration-300"
                        ></div>
                      </div>
                      <div class="h-[75%] w-3 rounded-sm bg-indigo-500/30">
                        <div
                          class="h-[80%] w-full rounded-sm bg-indigo-500 transition-all duration-300"
                        ></div>
                      </div>
                      <div class="h-[45%] w-3 rounded-sm bg-indigo-500/30">
                        <div
                          class="h-[50%] w-full rounded-sm bg-indigo-500 transition-all duration-300"
                        ></div>
                      </div>
                      <div class="h-[85%] w-3 rounded-sm bg-indigo-500/30">
                        <div
                          class="h-[90%] w-full rounded-sm bg-indigo-500 transition-all duration-300"
                        ></div>
                      </div>
                      <div class="h-[65%] w-3 rounded-sm bg-indigo-500/30">
                        <div
                          class="h-[70%] w-full rounded-sm bg-indigo-500 transition-all duration-300"
                        ></div>
                      </div>
                      <div class="h-[95%] w-3 rounded-sm bg-indigo-500/30">
                        <div
                          class="h-[85%] w-full rounded-sm bg-indigo-500 transition-all duration-300"
                        ></div>
                      </div>
                    </div>
                  </div>

                  <div class="flex items-center justify-between">
                    <div class="flex items-center gap-2">
                      <span class="text-xs font-medium text-slate-400">Last 7 days</span>
                      <svg
                        class="h-4 w-4 text-slate-400"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M19 9l-7 7-7-7"
                        ></path>
                      </svg>
                    </div>

                    <button
                      class="flex items-center gap-1 rounded-lg bg-gradient-to-r from-indigo-500 to-purple-500 px-3 py-1 text-xs font-medium text-white transition-all duration-300 hover:from-indigo-600 hover:to-purple-600"
                    >
                      View Details
                      <svg
                        class="h-3 w-3"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M9 5l7 7-7 7"
                        ></path>
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
              <!-- ============================================================ -->
            `;
            // Dynamic features buttons ke liye event listeners
            document.getElementById('feature-1-btn').addEventListener('click', () => {
              const content = document.getElementById('feature-1-content');
              content.style.display = content.style.display === 'none' ? 'block' : 'none';
            });
            document.getElementById('feature-2-btn').addEventListener('click', () => {
              const content = document.getElementById('feature-2-content');
              content.style.display = content.style.display === 'none' ? 'block' : 'none';
            });
            document.getElementById('feature-3-btn').addEventListener('click', () => {
              const content = document.getElementById('feature-3-content');
              content.style.display = content.style.display === 'none' ? 'block' : 'none';
            });

            // === NEW: Call updateCardNumbers() after content is loaded ===
            updateCardNumbers();
            // ============================================================

          } else {
            displayWrongCodeMessage();
          }
        }
      });

      // --- NEW: Functions for Daily Number Changes ---

      // Helper function to get today's date in YYYY-MM-DD format
      const getTodayDate = () => {
        const date = new Date();
        return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;
      };

      // Helper function to generate a random integer
      const getRandomInt = (min, max) => {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1)) + min;
      };

      // Helper function to generate random float for percentages
      const getRandomFloat = (min, max, decimals) => {
          const str = (Math.random() * (max - min) + min).toFixed(decimals);
          return parseFloat(str);
      };

      // Function to update card numbers daily
      const updateCardNumbers = () => {
        const today = getTodayDate();
        let lastUpdateDate = localStorage.getItem('lastUpdateDate');
        let savedNumbers = JSON.parse(localStorage.getItem('savedCardNumbers'));

        if (!savedNumbers || lastUpdateDate !== today) {
          // Generate new numbers if no saved data or if it's a new day
          console.log("Generating new daily numbers...");

          // Element 1: Trafic Card - 4-digit number (e.g., 1000-9990)
          // The last digit in the original component usually stays 0 for thousands, so we generate XYY0
          const newTrafficViews = getRandomInt(100, 999) * 10; // Ensures last digit is 0
          
          // Element 2: Performance Analytics Card
          const newPerfTotalViews = getRandomFloat(10, 50, 1); // e.g., 10.0 to 50.0
          const newPerfTotalViewsPercent = getRandomFloat(5, 25, 1); // e.g., 5.0 to 25.0
          const newPerfTraffic = getRandomFloat(0.5, 5, 1); // e.g., 0.5 to 5.0
          const newPerfTrafficPercent = getRandomFloat(1, 15, 1); // e.g., 1.0 to 15.0

          savedNumbers = {
            trafficViews: newTrafficViews,
            perfTotalViews: newPerfTotalViews,
            perfTotalViewsPercent: newPerfTotalViewsPercent,
            perfTraffic: newPerfTraffic,
            perfTrafficPercent: newPerfTrafficPercent,
          };

          localStorage.setItem('lastUpdateDate', today);
          localStorage.setItem('savedCardNumbers', JSON.stringify(savedNumbers));
        } else {
          console.log("Using saved daily numbers...");
        }

        // Apply numbers to Element 1 (Trafic Card)
        const trafficViewsStr = savedNumbers.trafficViews.toString().padStart(4, '0'); // Ensures 4 digits
        const trafficDigit1 = document.getElementById('traffic-digit-1');
        const trafficDigit2 = document.getElementById('traffic-digit-2');
        const trafficDigit3 = document.getElementById('traffic-digit-3');
        const trafficDigit4 = document.getElementById('traffic-digit-4');

        // Check if elements exist before setting properties
        if (trafficDigit1) trafficDigit1.style.setProperty('--num', trafficViewsStr[0]);
        if (trafficDigit2) trafficDigit2.style.setProperty('--num', trafficViewsStr[1]);
        if (trafficDigit3) trafficDigit3.style.setProperty('--num', trafficViewsStr[2]);
        if (trafficDigit4) trafficDigit4.style.setProperty('--num', trafficViewsStr[3]);


        // Apply numbers to Element 2 (Performance Analytics Card)
        const perfTotalViewsElem = document.getElementById('perf-total-views');
        const perfTotalViewsPercentElem = document.getElementById('perf-total-views-percent');
        const perfTrafficElem = document.getElementById('perf-traffic');
        const perfTrafficPercentElem = document.getElementById('perf-traffic-percent');

        if (perfTotalViewsElem) perfTotalViewsElem.textContent = `${savedNumbers.perfTotalViews}K`;
        if (perfTotalViewsPercentElem) {
            const isPositive = savedNumbers.perfTotalViewsPercent >= 0;
            perfTotalViewsPercentElem.textContent = `${isPositive ? '+' : ''}${savedNumbers.perfTotalViewsPercent}%`;
            perfTotalViewsPercentElem.classList.toggle('text-emerald-500', isPositive);
            perfTotalViewsPercentElem.classList.toggle('text-red-500', !isPositive);
        }
        if (perfTrafficElem) perfTrafficElem.textContent = `${savedNumbers.perfTraffic}K`;
        if (perfTrafficPercentElem) {
            const isPositive = savedNumbers.perfTrafficPercent >= 0;
            perfTrafficPercentElem.textContent = `${isPositive ? '+' : ''}${savedNumbers.perfTrafficPercent}%`;
            perfTrafficPercentElem.classList.toggle('text-emerald-500', isPositive);
            perfTrafficPercentElem.classList.toggle('text-red-500', !isPositive);
        }
      };
      // --- END NEW: Functions for Daily Number Changes ---

    });
  </script>
</body>
</html>